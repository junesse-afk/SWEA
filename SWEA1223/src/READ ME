##SWEA1223. [S/W 문제해결 기본] 6일차 - 계산기2

##문자열로 이루어진 계산식이 주어질 때, 이 계산식을 후위 표기식으로 바꾸어 계산하는 프로그램을 작성하시오.
##예를 들어 “3+4+5*6+7”라는 문자열로 된 계산식을 후위 표기식으로 바꾸면 다음과 같다.
##"34+56*+7+"
##변환된 식을 계산하면 44를 얻을 수 있다.
##문자열 계산식을 구성하는 연산자는 +, * 두 종류이며 피연산자인 숫자는 0 ~ 9의 정수만 주어진다.

##처음보는 메서드와 클래스들
항목                		기능                                    		설명
--------------------------------------------------------------------------------------------------------------------------------------------------------
Stack               		스택 자료구조 (LIFO)                     		데이터를 쌓고 꺼내는 자료구조. push(), pop(), peek() 메서드를 사용.
--------------------------------------------------------------------------------------------------------------------------------------------------------
push()              		스택에 요소를 추가                       		스택에 데이터를 추가하는 메서드. 스택의 가장 위에 값을 넣음. (stack.push(value))
stack.push(3);  // 스택에 3을 넣음
--------------------------------------------------------------------------------------------------------------------------------------------------------
peek()              		스택에서 가장 위의 요소를 반환 (삭제하지 않음) 스택에서 가장 마지막에 추가된 요소를 확인하지만 제거하지는 않음.
int top = stack.peek();  // 스택의 가장 위 값 (예: 3)을 반환
--------------------------------------------------------------------------------------------------------------------------------------------------------
pop()               		스택에서 가장 위의 요소를 반환하고 삭제     	스택에서 가장 마지막에 추가된 요소를 반환하고, 그 요소를 스택에서 제거함.
int value = stack.pop();  // 스택에서 3을 꺼내고 value에 저장
--------------------------------------------------------------------------------------------------------------------------------------------------------
toCharArray()       		문자열을 문자 배열로 변환                	문자열을 문자 배열로 바꾸어 각 문자에 접근 가능하게 만듦. (예: String s = "abc"; s.toCharArray();)
String s = "hello";
char[] chars = s.toCharArray();  // ['h', 'e', 'l', 'l', 'o']
--------------------------------------------------------------------------------------------------------------------------------------------------------
StringBuilder       		문자열을 동적으로 조작하는 클래스        	문자열을 효율적으로 조작할 수 있게 도와주는 클래스. (append(), insert() 등)
StringBuilder sb = new StringBuilder();
sb.append("Hello");
sb.append(" World");
System.out.println(sb.toString());  // "Hello World"
--------------------------------------------------------------------------------------------------------------------------------------------------------
Character.isDigit(c) 	  문자 c가 숫자인지 확인하는 메서드        	문자 c가 숫자인지 true/false로 반환. ('1', '2' 등이 숫자).
boolean isDigit = Character.isDigit('1');  // true
boolean isDigit = Character.isDigit('a');  // false
